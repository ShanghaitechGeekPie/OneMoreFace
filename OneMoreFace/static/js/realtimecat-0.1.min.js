function startScreenStreamFrom(e) {
	var f = RTCat.localScreenStream;
	RTCat.GetUserMedia.call(navigator, {
		audio: !1,
		video: {
			mandatory: {
				chromeMediaSource: "desktop",
				chromeMediaSourceId: e,
				maxWidth: window.screen.width,
				maxHeight: window.screen.height
			}
		}
	}, function(d) {
		f.screen = !0;
		f.stream = d;
		f.emit("access-accepted")
	}, function(d) {
		f.emit("access-failed", d)
	})
}
var RTCat = RTCat ||
function() {};
RTCat.PeerConnectioin = window.PeerConnection || window.webkitPeerConnection00 || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;
RTCat.SessionDescription = window.mozRTCSessionDescription || window.RTCSessionDescription;
RTCat.IceCandidate = window.mozRTCIceCandidate || window.RTCIceCandidate;
RTCat.GetUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
RTCat.URL = window.URL || window.webkitURL || window.msURL || window.oURL;
RTCat.isMoz = !! navigator.mozGetUserMedia;
RTCat = RTCat ||
function() {};
RTCat.Detect = function() {
	var e = this;
	this.name = function() {
		var d = "track" in document.createElement("track"),
			e = window.chrome && window.chrome.webstore ? Object.keys(window.chrome.webstore).length : 0,
			f = !! window.opera || 0 <= navigator.userAgent.indexOf(" OPR/"),
			h = "undefined" != typeof InstallTrigger,
			q = 0 < Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor"),
			g = !! window.chrome && !f,
			c = !! document.documentMode,
			b = /QQBrowser/.test(navigator.userAgent),
			u = /MetaSr/.test(navigator.userAgent),
			k;
		a: {
			k = /^liebao/i;
			var m = window.external || {},
				n;
			for (n in m) if (k.test(n)) {
				k = !0;
				break a
			}
			k = !1
		}
		m = !1;
		return d && (1 < e || (m = !0)), b ? 6 : k ? 9 : u ? 10 : q ? 3 : h ? 4 : f ? 5 : m ? 7 : c ? 1 : g ? 2 : 0
	}();
	this.version = function() {
		switch (e.name) {
		case 0:
			return 0;
		case 1:
			if (/MSIE ([\d\.]+)/.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		case 2:
			if (/Chrome\/([\d]+)\./.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		case 3:
			if (/Version\/([\d\.]+)/.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		case 4:
			if (/Firefox\/([\d]+)\./.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		case 5:
			if (/OPR\/([\d]+)\./.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		case 6:
			if (/QQBrowser\/([\d]+)\./.test(navigator.userAgent)) return parseInt(RegExp.$1);
			break;
		default:
			return 0
		}
	}();
	this.webrtc = function() {
		var d = {};
		(RTCat.GetUserMedia && (d.getUserMedia = !0), RTCat.PeerConnectioin && (d.peerConnection = !0), d.peerConnection) && (new RTCat.PeerConnectioin({
			iceServers: [{
				url: "stun:api.shishimao.com:3478"
			}]
		})).createDataChannel && (d.dataChannel = !0);
		return d
	}();
	var f = [2, 5, 6, 7, 8, 10];
	this.isSupported = function() {
		for (var d in f) if (this.name == f[d]) return !0;
		return !1
	};
	this.getInputDevices = function(d) {
		try {
			var e = [];
			MediaStreamTrack.getSources(function(h) {
				for (var q = 0; q < h.length; q++) {
					var g = h[q];
					e.push({
						type: g.kind,
						label: g.label,
						id: g.id
					})
				}
				d(null, e)
			})
		} catch (f) {
			d(f)
		}
	};
	this.getBrowser = function() {
		var d;
		switch (this.name) {
		case 0:
			d = "unknown browser";
			break;
		case 1:
			d = "IE";
			break;
		case 2:
			d = "Chrome";
			break;
		case 3:
			d = "Safari";
			break;
		case 4:
			d = "Firefox";
			break;
		case 5:
			d = "Opera";
			break;
		case 8:
			d = "360极速浏览器";
			break;
		case 7:
			d = "360安全浏览器";
			break;
		case 10:
			d = "搜狗浏览器";
			break;
		case 9:
			d = "猎豹浏览器";
			break;
		case 6:
			d = "QQ浏览器";
			break;
		default:
			d = "unknown browser"
		}
		return d
	};
	this.getVersion = function() {
		return this.version
	};
	this.WebRtcSupport = function() {
		return this.webrtc
	}
};
RTCat = RTCat || {};
RTCat.EventEmitter = function() {
	this.events = {}
};
RTCat.EventEmitter.prototype.on = function(e, f) {
	this.events[e] = [];
	this.events[e].push(f)
};
RTCat.EventEmitter.prototype.emit = function(e, f) {
	var d, t, p = this.events[e],
		h = Array.prototype.slice.call(arguments, 1);
	if (p) for (d = 0, t = p.length; t > d; d++) p[d].apply(null, h)
};
RTCat = RTCat ||
function() {};
RTCat.extensionInstalled = !1;
window.addEventListener("message", function(e) {
	e.origin == window.location.origin && (e.data.type && "SS_PING" === e.data.type && (RTCat.extensionInstalled = !0), e.data.type && "SS_DIALOG_SUCCESS" === e.data.type && startScreenStreamFrom(e.data.streamId), e.data.type && "SS_DIALOG_CANCEL" === e.data.type && RTCat.localScreenStream && RTCat.localScreenStream.emit("access-failed", "User cancelled!"))
});
RTCat = RTCat ||
function() {};
RTCat.Session = function(e) {
	function f(a, l) {
		return function(b) {
			a.setLocalDescription(b);
			c.sendMessage("__offer", {
				sdp: b,
				to: l
			})
		}
	}
	function d(a) {}
	function t() {
		c.onopen = function() {
			this.sendMessage("__join", {})
		};
		c.onmessage = function(a) {
			a = JSON.parse(a.data);
			b.emit(a.eventName, a.data)
		};
		c.onerror = function(a) {
			b.emit("session-connect-fail", a);
			this.close()
		};
		c.sendMessage = function(a, b) {
			this.send(JSON.stringify({
				eventName: a,
				data: b
			}))
		}
	}
	function p(a, l) {
		var r = new RTCat.PeerConnectioin(u, {
			optional: [{
				RtpDataChannels: !0
			}]
		});
		return k[a] = r, r.onicecandidate = function(b) {
			b.candidate && c.sendMessage("__ice", {
				label: b.candidate.sdpMLineIndex,
				candidate: b.candidate.candidate,
				to: a
			})
		}, r.onaddstream = function(l) {
			for (var c in m) c == a && (b.remoteStreams[a].stream = l.stream, b.emit("stream-subscribed", b.remoteStreams[a]))
		}, r.onnegotiationneeded = function(a) {
			console.log(a)
		}, l.stream && r.addStream(l.stream), l.data && h(r, a), r
	}
	function h(a, b) {
		var c = a.createDataChannel("label");
		k[b].channel = c;
		g(c, b)
	}
	function q(a) {
		var b = new RTCat.Stream;
		return b.init = null, b.id = a, b
	}
	function g(a, l) {
		a.onopen = function() {
			b.emit("dataChannel-created", b.remoteStreams[l])
		};
		a.onclose = function(a) {};
		a.onmessage = function(a) {
			a = JSON.parse(a.data);
			"message" === a.type ? b.emit("stream-message-received", l, a.content) : "video" !== a.type && "file" === a.type && (b.remoteStreams[l][a.filename] = b.remoteStreams[l][a.filename] || [], b.remoteStreams[l][a.filename].push(a.content), a.last) && (a = {
				blobUrl: b.remoteStreams[l][a.filename].join(""),
				name: a.filename,
				save: function() {
					var a = document.createElement("a");
					a.href = this.blobUrl;
					a.target = "_blank";
					a.download = this.name || this.blobUrl;
					var b = document.createEvent("Event");
					b.initEvent("click", !0, !0);
					a.dispatchEvent(b);
					URL.revokeObjectURL(a.href)
				}
			}, b.emit("stream-file-received", l, a))
		};
		a.onerror = function(a) {
			b.emit("add-dataChannel-fail", error)
		}
	}
	var c, b = this,
		u = {
			iceServers: [{
				url: "stun:api.realtimecat.com:3478"
			}, {
				url: "stun:stun.anyfirewall.com:3478"
			}, {
				credential: "homeo",
				username: "homeo",
				url: "turn:turn.bistri.com:80"
			}, {
				credential: "webrtc",
				username: "webrtc",
				url: "turn:turn.anyfirewall.com:443?transport=tcp"
			}]
		},
		k = {},
		m = {},
		n = [];
	this.token = e;
	this.remoteStreams = {};
	this.localStream = {};
	this.connect = function() {
		c = new WebSocket("wss://api.realtimecat.com:3000/", e);
		t()
	};
	this.publish = function(a) {
		if (a.local) {
			a.session = this;
			this.localStream = a;
			for (var l = 0; l < n.length; l++) {
				var c = p(n[l], a);
				b.remoteStreams[n[l]].pc = c;
				c.createOffer(f(c, n[l]), d)
			}
		}
	};
	this.subscribe = function(a, b) {
		a.local || (m[a.id] = b)
	};
	this.unsubscribe = function(a) {
		this.remoteStreams[a.id] && (this.remoteStreams[a.id].showing && this.remoteStreams[a.id].stop(), m[a.id] && delete m[a.id], delete this.remoteStreams[a.id])
	};
	this.unpublish = function(a) {
		if (a === this.localStream) {
			for (var b in k) k[b].close();
			c.sendMessage("__unpublish", {})
		}
	};
	this.disconnect = function() {
		c.close()
	};
	this.on("_peers", function(a) {
		n = a.connections;
		for (var c in n) b.remoteStreams[n[c]] = q(n[c]), b.remoteStreams[n[c]].data = !0;
		b.emit("session-connected", b.remoteStreams)
	});
	this.on("_offer", function(a) {
		var b = k[a.from];
		b.setRemoteDescription(new RTCat.SessionDescription(a.sdp));
		b.createAnswer(function(d) {
			b.setLocalDescription(d);
			c.sendMessage("__answer", {
				to: a.from,
				sdp: d
			})
		}, function(a) {
			console.log(a)
		})
	});
	this.on("_answer", function(a) {
		k[a.from].setRemoteDescription(new RTCat.SessionDescription(a.sdp))
	});
	this.on("_ice", function(a) {
		var b = new RTCat.IceCandidate(a);
		a = k[a.from];
		if ("complete" != a.iceGatheringState) try {
			a.addIceCandidate(b)
		} catch (c) {}
	});
	this.on("_remove_peer", function(a) {
		var c = k[a.socketId];
		c && (c.close(), delete k[a.socketId]);
		b.emit("stream-removed", a.socketId)
	});
	this.on("_join", function(a) {
		n.push(a.socketId);
		var c = p(a.socketId, b.localStream),
			d = q(a.socketId);
		b.remoteStreams[a.socketId] = d;
		d.pc = c;
		d.data = b.localStream.data;
		b.emit("stream-added", d)
	});
	this.on("_message", function(a) {
		b.emit("session-message-received", a.from, a.message)
	});
	this.sendMessageTo = function(a, b) {
		c.sendMessage("__message", {
			message: a,
			socketId: b
		})
	};
	this["switch"] = function(a) {
		if (b.renegotiating = !0, b.localStream) if (b.localStream.video == a.video) if (a.local) {
			a.session = this;
			this.localStream = a;
			for (var c = 0; c < b.remoteStreams; c++) b.remoteStreams[c].pc.removeStream(b.remoteStreams[c].stream), b.remoteStreams[c].pc.addStream(a.stream), b.remoteStreams[c].pc.createOffer(f(b.remoteStreams[c].pc, b.remoteStreams[c].id), d)
		} else b.emit("switch-error", "Can not switch as remote stream");
		else b.emit("switch-error", "Can not switch the same type stream");
		else b.emit("switch-error", "Publish a localStream before switch")
	}
};
RTCat.Session.prototype = new RTCat.EventEmitter;
RTCat = RTCat ||
function() {};
RTCat.Stream = function(e) {
	function f(d) {
		try {
			MediaStreamTrack ? MediaStreamTrack.getSources(function(c) {
				for (var b = {}, g = 0; g < c.length; g++) {
					var e = c[g];
					"audio" == e.kind && (b.hasAudioDevice = !0);
					"video" == e.kind && (b.hasVideoDevice = !0)
				}
				d(null, b)
			}) : d("not supported")
		} catch (g) {
			d(null, {
				hasAudioDevice: !0,
				hasVideoDevice: !0
			})
		}
	}
	function d(d) {
		h.stream = d;
		h.emit("access-accepted")
	}
	function t(d) {
		h.emit("access-failed", d)
	}
	function p(d, g) {
		var c = new AudioContext,
			b = c.createAnalyser(),
			e = c.createMediaStreamSource(g),
			h = c.createScriptProcessor(2048, 2, 2),
			f = c.createGain();
		f.connect(c.destination);
		f.gain.value = .9;
		b.smoothingTimeConstant = .3;
		b.fftSize = 1024;
		e.connect(b);
		b.connect(h);
		h.connect(c.destination);
		h.onaudioprocess = function() {
			var c = new Uint8Array(b.frequencyBinCount);
			b.getByteFrequencyData(c);
			for (var a = c.length, g = 0; a > g; g++) 100 < g && 100 < c[g] && (d.volume = 0);
			d.volume = .9
		}
	}
	var h = this;
	this.newConfig = {};
	this.showing = !1;
	this.init = function() {
		h.local = !0;
		e.data && (h.data = !0);
		e.screen ? RTCat.isMoz ? h.emit("access-failed", "The browser not supported screen sharing") : RTCat.extensionInstalled ? (window.postMessage({
			type: "SS_UI_REQUEST",
			text: "start"
		}, "*"), RTCat.localScreenStream = this) : h.emit("access-failed", "Please install extension") : f(function(f, g) {
			f || (e.audio && g.hasAudioDevice && (h.newConfig.audio = !0), e.video && g.hasVideoDevice && (h.newConfig.video = !0));
			h.newConfig.audio || h.newConfig.video ? RTCat.GetUserMedia.call(navigator, h.newConfig, d, t) : h.emit("access-accepted")
		})
	};
	this.hasAudio = function() {
		return this.local ? this.newConfig.audio : this.stream ? this.stream.getAudioTracks() ? !0 : void 0 : !1
	};
	this.hasVideo = function() {
		return this.local ? this.newConfig.video : this.stream ? this.stream.getVideoTracks() ? !0 : void 0 : !1
	};
	this.hasData = function() {
		return this.local ? this.data : this.pc && this.pc.channel ? !0 : !1
	};
	this.mute = function() {
		return this.local ? void 0 : this.player ? this.player.muted = !0 : !1
	};
	this.phonic = function() {
		return this.local ? void 0 : this.player ? (this.player.muted = !1, !0) : !1
	};
	this.close = function() {
		this.local && this.session && (this.stop(), this.session.unpublish(this))
	};
	this.play = function(d, g) {
		if (!this.showing) {
			this.showing = !0;
			this.elementId = d;
			g && g.width && g.height ? parseInt(g.width) && parseInt(g.height) || (g = g || {
				width: 300,
				height: 300
			}) : g = g || {
				width: 300,
				height: 300
			};
			var c;
			c = this.stream;
			var b = g;
			if (0 == c.getVideoTracks().length) {
				var e = document.createElement("audio");
				e.setAttribute("controls", "controls")
			} else e = document.createElement("video"), e.setAttribute("width", b.width), e.setAttribute("height", b.height);
			e.src = RTCat.URL.createObjectURL(c);
			c = (document.querySelector("div#" + d).appendChild(e), e.play(), e);
			this.local ? (c.volume = 0, c.muted = 0) : window.AudioContext && 0 < this.stream.getAudioTracks().length && p(c, this.stream);
			this.player = c
		}
	};
	this.stop = function() {
		this.local || this.showing && (this.showing = !1, this.player.remove())
	};
	this.sendMessage = function(d) {
		!this.local && this.data && this.pc.channel && "open" == this.pc.channel.readyState && this.pc.channel.send(JSON.stringify({
			content: d,
			type: "message"
		}))
	};
	this.sendFile = function(d) {
		if (!this.local && this.data && !this.file_sending && (this.file_sending = !0, this.pc.channel)) {
			var e, c = new FileReader;
			c.name = d.name;
			c.readAsDataURL(d);
			c.onReadAsDataURL = function(b, f) {
				var k = {
					type: "file",
					filename: c.name
				};
				(b && (f = b.target.result, e = f.length), 1024 < f.length) ? (h.emit("file-sending", d.name, (e - f.length) / e), k.content = f.slice(0, 1024)) : (h.file_sending = !1, h.emit("file-sent", d.name), k.content = f, k.last = !0);
				h.pc.channel.send(JSON.stringify(k));
				var m = f.slice(k.content.length);
				console.log(m.length);
				m.length && setTimeout(function() {
					c.onReadAsDataURL(null, m)
				}, 450)
			};
			c.onload = c.onReadAsDataURL
		}
	};
	this.getCapture = function(d, e, c, b, f) {
		this.player && (e && parseFloat(e) || (e = 0), c && parseFloat(c) || (c = 0), b && parseFloat(b) || (b = this.player.width), f && parseFloat(f) || (f = this.player.height), this.showing) && d.getContext("2d").drawImage(this.player, e, c, b, f)
	}
};
RTCat.Stream.prototype = new RTCat.EventEmitter;
